name: Deploy to Staging

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:  # Allow manual triggering from any branch

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.5.0
  # Terraform Variables - defined once and used in both plan and apply
  TF_VAR_environment: ${{ 'staging' }}
  TF_VAR_aws_region: ${{ 'ap-south-1' }}
  TF_VAR_ssh_cidr: ${{ '0.0.0.0/0' }}
  TF_VAR_cloudflare_email: ${{ secrets.TF_VAR_CLOUDFLARE_EMAIL }}
  TF_VAR_cloudflare_api_key: ${{ secrets.TF_VAR_CLOUDFLARE_API_KEY }}
  TF_VAR_cloudflare_zone_name: ${{ secrets.TF_VAR_CLOUDFLARE_ZONE_NAME }}
  TF_VAR_subdomain: ${{ 'new-cms' }}
  TF_VAR_letsencrypt_email: ${{ secrets.TF_VAR_LETSENCRYPT_EMAIL }}
  TF_VAR_repo_url: ${{ 'https://github.com/avantifellows/nex-gen-cms.git' }}
  TF_VAR_repo_branch: ${{ github.ref_name }}
  TF_VAR_db_service_endpoint: ${{ 'https://staging-db.avantifellows.org/api/' }}
  TF_VAR_db_service_token: ${{ secrets.TF_VAR_DB_SERVICE_TOKEN_STAGING }}
  TF_VAR_instance_type: ${{ 't4g.small' }}
  TF_VAR_key_pair_name: ${{ secrets.TF_VAR_KEY_PAIR_NAME }}

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        run: terraform init -reconfigure
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: terraform plan -out=tfplan -detailed-exitcode
        continue-on-error: false
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: terraform apply -auto-approve tfplan
      
      - name: Output Application URL
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          echo "üöÄ Application deployed successfully!"
          echo "URL: $(terraform output -raw application_url)"
          echo "IP: $(terraform output -raw instance_public_ip)"
      
      - name: Wait for Application
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          echo "Waiting for application to be ready..."
          URL=$(terraform output -raw application_url)
          for i in {1..30}; do
            if curl -sf "$URL" > /dev/null; then
              echo "‚úÖ Application is ready at $URL"
              exit 0
            fi
            echo "Attempt $i/30: Application not ready yet, waiting 30 seconds..."
            sleep 30
          done
          echo "‚ö†Ô∏è  Application might not be ready yet, but deployment completed"
